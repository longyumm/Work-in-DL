import torch 
from torch import nn
from torch.autograd import Variable 
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import torchvision 
import torch.utils.data as Data
import torchvision.datasets as dsets

EPOCH=1
BATCH_SIZE=100
TIME_STEP=20
INPUT_SIZE=28
LR=0.01
DOWNLOAD_MNIST=True


train_data = dsets.MNIST(root='./mnist/',train=True,transform=transforms.ToTensor(),download=DOWNLOAD_MNIST,)            
train_loader=Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=True)


test_data = dsets.MNIST(root='./mnist/', train=False, transform=transforms.ToTensor())
test_x = Variable(test_data.test_data, volatile=True).type(torch.FloatTensor)[:2000]/255.   # shape (2000, 28, 28) value in range(0,1)
test_y = test_data.test_labels.numpy().squeeze()[:2000] 


class RNN(nn.Module):
	def __init__(self):
		super(RNN,self).__init__()

		self.rnn=nn.LSTM(input_size=INPUT_SIZE,hidden_size=64,num_layers=1,batch_first=True)
		self.out=nn.Linear(64,10)

	def forward(self,x):
		r_out,(h_c,h_n)=self.rnn(x,None)
		out=self.out(r_out[:,-1,:])
		return out

		## ht=(Wxh*Xt+Whh*h(t-1)+b). Wxh=dim_input*dim_hidden_state,Whh=dim_hidden_state*dim_hidden_state


rnn=RNN()
print(rnn)

optimizer=torch.optim.Adam(rnn.parameters(),lr=LR)
loss_func=nn.CrossEntropyLoss()

for epoch in range(EPOCH):
	for step,(x,y) in enumerate(train_loader):
		b_x=Variable(x.view(-1,28,28))
		##b_x=100*28*28 train 图片的时候可以用二维数据
		b_y=Variable(y)

		output=rnn(b_x)
		loss=loss_func(output,b_y)
		optimizer.zero_grad()
		loss.backward()
		optimizer.step()

		if step % 50 == 0:
			test_output = rnn(test_x)                   # (samples, time_step, input_size)
			pred_y = torch.max(test_output, 1)[1].data.numpy().squeeze()
			accuracy = sum(pred_y == test_y) / float(test_y.size)
			print('Epoch: ', epoch, '| train loss: %.4f' % loss.data[0], '| test accuracy: %.2f' % accuracy)

test_output = rnn(test_x[:20].view(-1, 28, 28))
pred_y = torch.max(test_output, 1)[1].data.numpy().squeeze()
print(pred_y, 'prediction number')
print(test_y[:20], 'real number')
